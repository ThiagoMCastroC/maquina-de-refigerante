class AFD:
    def __init__(self):
        # Definindo o estado inicial e os estados de aceitação
        self.estado_inicial = 'q0'
        self.estados_aceitacao = {'q0','q3','q7'}
        # Definindo a tabela de transições
        self.transicoes = {
            'q0': {'a': 'q1', 'b':'q4','c':'q4'},
            'q1': {'a':'q2'},
            'q2': {'a':'q3'},
            'q3': {'b':'q3','c':'q3'},
            'q4': {'b':'q4','c':'q4','a':'q5'},
            'q5': {'a':'q6'},
            'q6': {'a':'q7'},
            
        }
       
        #(aaa(b | c)*) |( (b | c)* aaa)

    def processar(self, cadeia):
        self.estado_atual = self.estado_inicial
        for simbolo in cadeia:
            if simbolo in self.transicoes[self.estado_atual]:
                self.estado_atual = self.transicoes[self.estado_atual][simbolo]
            else:
                return False  # Se encontrar um símbolo inválido, rejeitar

        # Verificar se terminou em um estado de aceitação
        return self.estado_atual in self.estados_aceitacao

# Exemplo de uso
afd = AFD()

# Teste de algumas cadeias
cadeias = ['aaabc', 'aaabab','aaa', 'bcbcaaa','aaabcbc' 'aaabcbcbc']
for cadeia in cadeias:
    if afd.processar(cadeia):
        print(f"A cadeia '{cadeia}' foi aceita.")
    else:
        print(f"A cadeia '{cadeia}' foi rejeitada.")
